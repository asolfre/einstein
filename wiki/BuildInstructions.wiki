#summary How to build Einstein

== General remarks ==

Einstein relies on a framework called "K" which is included in the SVN repository. It is built using Xcode or [http://www.perforce.com/jam/jam.html Perforce Jam].

For now, the Einstein ROM Extension (REX) can only be built using Apple Newton C++ Tools and Apple Newton ToolKit, available on [http://www.unna.org/ UNNA] as part of the [http://www.unna.org/view.php?/development/NewtonDev NewtonDev environment] and running in MacOS 9 (I actually use Classic and [http://www.kallisys.com/mac/toolserver(1)/ toolserver(1)]).

For your convenience, a binary of the Einstein REX is available under the {{{_Data_/}}} directory.

== Building on MacOS X, for MacOS X, using Xcode 3 ==

  # Get the latest Xcode from Apple and install it.
  # Open Einstein.xcodeproj, located in {{{_Build_/Xcode3}}}
  # Choose "Einstein" as your Active Target.
  # Build!

== Building on MacOS X, for iOS 3.2 and up, using Xcode 3 ==

  # Get the latest Xcode with iOS SDK from Apple and install it.
  # Open Einstein.xcodeproj, located in {{{_Build_/Xcode3}}}
  # Choose "iOSEinstein" as your Active Target.
  # From the same menu, choose whether you are building for Simulator or Device (actual hardware).
  # From the same menu, choose either iPad or iPhone as a target. (for example: iPhone Simulator 4.2)
    * due to a bug in Xcode, the iPad emulator version will not launch correctly - the iPhone simulator however will
    * due to another bug, once you built an iOS version, you can not switch back to build a native OS X version. If you want to switch back to native development, you must quit Xcode and delete the file `_Build_/Xcode3/Einstein.xcodeproj/yourName.pbxuser`
  # Build!

== About the ROM ==

Einstein requires an 8 MB Newton ROM dump image (8,388,608 bytes exactly) to run.

For iOS builds, it must be named {{{717006.rom}}} and in the application's Documents folder at runtime.

For the iOS simulator, the path to this file would be be: /(Home)/Library/Application Support/iPhone Simulator/(SDK Version)/Applications/(UUID)/Documents/717006.rom

For running on an iOS device, use iTunes to copy the ROM file to the device.

For running on Mac OS X, the ROM file can be selected at runtime.

This must a binary copy of the ROM, a debugger image will currently not work.  An MD5 checksum of a known working ROM dump is 70dc5f5f3102e44f15dc93f356b98add.

== Building on Unix (including MacOS X) and Cygwin, as a native build, using Jam ==

  # Install Jam 2.5. Not btjam, not ftjam, regular jam. You can get it from MacPorts on MacOS X. On Ubuntu, the debian package jam is fine. You can also compile it from source: ftp://ftp.perforce.com/pub/jam/jam-2.5.zip
  # Make sure you have {{{libstdc++-devel}}} installed as well.
  # K is part of the repository. You may have to update Makefiles. Unfortunately it vanished from SourceForge
  # Compile K with Jam with {{{cd <path_to_K>/_Build_/Jam/ && jam}}}
  # Get libffi. On MacOS X, I suggest getting with MacPorts.  There seem to be pre-built copies for various platforms in the Einstein project in svn too.
  # Compile Einstein with Jam with {{{cd <path_to_einstein>/_Build_/Jam/ && jam -sK=<path_to_K>}}} or {{{cd <path_to_einstein>/_Build_/Jam/ && jam -sK=<path_to_K> -sC++FLAGS=-I/path/to/libffi/include -sCCFLAGS=-I/path/to/libffi/include -sLINKFLAGS=-I/path/to/libffi/include}}} if libffi isn't installed in a standard path that the compiler will find.  For example:

{{{jam -sjittarget=generic -sC++FLAGS="-I/usr/local/include -I/root/einstein/Einstein/libffi-linux/include/ -L/root/einstein/Einstein/libffi-linux/lib" -sCCFLAGS="-I/usr/local/include -I/root/einstein/Einstein/libffi-linux/include/ -L/root/einstein/Einstein/libffi-linux/lib"  -sK=/root/K/}}}

=== Notes ===

If you got libffi with MacPorts as suggested, you don't need to specify its path on the command line. You will very probably need to edit the Jamfile to cope with your target. 

== On Unix (including MacOS X), as cross build, using Jam ==

The general method is the following:

  # Install Jam 2.5. Not btjam, not ftjam, regular jam. You can get it from MacPorts on MacOS X. On Ubuntu, the debian package jam is fine. You can also compile it from source: ftp://ftp.perforce.com/pub/jam/jam-2.5.zip
  # Get K (preferably from CVS) at http://sourceforge.net/projects/KLibs/
  # Edit K's Jamfile so it will work with your setup.
  # Compile K with Jam with {{{cd <path_to_K>/_Build_/Jam/ && jam -starget=<cross_target>}}}
  # Edit Einstein's Jamfile so it will work with your setup.
  # Compile Einstein with Jam with {{{cd <path_to_einstein>/_Build_/Jam/ && jam -sK=<path_to_K> -starget=<cross_target>}}}

== How I built cross-binaries ==

  * OpenZaurus 3.4.5: with crosstool compilers, cf OpenZaurusBuildInstructions.
  * Nokia 770 OS 2005: with crosstool compilers (built with gcc3 on the Mac).
  * Debian x86: with crosstool compilers.
  * Nokia 770/800 OS 2006: with Code Sourcery compilers ported with MacPorts, cf NokiaBuildInstructions.