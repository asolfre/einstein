#summary How to build Einstein

= General remarks =

Einstein relies on K which is part of the SVN repository. It is built using Xcode or [http://www.perforce.com/jam/jam.html Perforce Jam].

For now, Einstein ROM Extension can only be built using Apple Newton C++ Tools and Apple Newton ToolKit, available on [http://www.unna.org/ UNNA] as part of the [http://www.unna.org/view.php?/development/NewtonDev NewtonDev environment] and running in MacOS 9 (I actually use Classic and [http://www.kallisys.com/mac/toolserver(1)/ toolserver(1)]).

For your convenience, a binary of the Einstein REX is available under the {{{_Data_/}}} directory.

= Building on MacOS X, for MacOS X, using Xcode =

  # Get latest Xcode from Apple Connection website and install it with 10.3.9 and 10.4u cross-SDKs (this is the default).
  # Open the Einstein Xcode project.
  # Choose your target (I suggest Einstein.app)
  # K is part of the SVN repository and will build automatically
  # Click build.

= Building on MacOS X, for iOS (iPhone, etc), using Xcode =

  # Get Xcode 3.2.4 from the Apple Developers website and install it with the iOS 4 SDK
  # Open the Einstein Xcode project.
  # Choose iEinstein as a target for either the emulator or for the real device
    * due to a bug in Xcode, the iPad emulator version will not launch correctly - the iPhone simulator however will
    * due to another bug, once you built an iOS version, you can not switch back to build a native OS X version. If you want to switch back to native development, you must quit Xcode and delete the file `_Build_/Xcode3/Einstein.xcodeproj/yourName.pbxuser`
  # iEinstein expects a binary ROM image (8MB exactly) named `717006` in the `_Data_` directory at compile time - this must a binary copy of the ROM, a debugger image will currently not work
  # "K" is part of the SVN repository and will build automatically
  # Click build.

= Building on Unix (including MacOS X) and Cygwin, as a native build, using Jam =

  # Install Jam 2.5. Not btjam, not ftjam, regular jam. You can get it from MacPorts on MacOS X. On Ubuntu, the debian package jam is fine. You can also compile it from source: ftp://ftp.perforce.com/pub/jam/jam-2.5.zip
  # Make sure you have {{libstdc++-devel}} installed as well.
  # K is part of the repository. You may have to update Makefiles. Unfortunately it vanished from SourceForge
  # Compile K with Jam with {{{cd <path_to_K>/_Build_/Jam/ && jam}}}
  # Get libffi. On MacOS X, I suggest getting with MacPorts.  There seem to be pre-built copies for various platforms in the Einstein project in svn too.
  # Compile Einstein with Jam with {{{cd <path_to_einstein>/_Build_/Jam/ && jam -sK=<path_to_K>}}} or {{{cd <path_to_einstein>/_Build_/Jam/ && jam -sK=<path_to_K> -sC++FLAGS=-I/path/to/libffi/include -sCCFLAGS=-I/path/to/libffi/include -sLINKFLAGS=-I/path/to/libffi/include}}} if libffi isn't installed in a standard path that the compiler will find.  For example:

{{{
jam -sjittarget=generic -sC++FLAGS="-I/usr/local/include -I/root/einstein/Einstein/libffi-linux/include/ -L/root/einstein/Einstein/libffi-linux/lib" -sCCFLAGS="-I/usr/local/include -I/root/einstein/Einstein/libffi-linux/include/ -L/root/einstein/Einstein/libffi-linux/lib"  -sK=/root/K/
}}}

== Notes ==
If you got libffi with MacPorts as suggested, you don't need to specify its path on the command line. You will very probably need to edit the Jamfile to cope with your target. 

= On Unix (including MacOS X), as cross build, using Jam =

The general method is the following:

  # Install Jam 2.5. Not btjam, not ftjam, regular jam. You can get it from MacPorts on MacOS X. On Ubuntu, the debian package jam is fine. You can also compile it from source: ftp://ftp.perforce.com/pub/jam/jam-2.5.zip
  # Get K (preferably from CVS) at http://sourceforge.net/projects/KLibs/
  # Edit K's Jamfile so it will work with your setup.
  # Compile K with Jam with cd <path_to_K>/_Build_/Jam/ && jam -starget=<cross_target>
  # Edit Einstein's Jamfile so it will work with your setup.
  # Compile Einstein with Jam with cd <path_to_einstein>/_Build_/Jam/ && jam -sK=<path_to_K> -starget=<cross_target>

== How I built cross-binaries ==
  * OpenZaurus 3.4.5: with crosstool compilers, cf OpenZaurusBuildInstructions.
  * Nokia 770 OS 2005: with crosstool compilers (built with gcc3 on the Mac).
  * Debian x86: with crosstool compilers.
  * Nokia 770/800 OS 2006: with Code Sourcery compilers ported with MacPorts, cf NokiaBuildInstructions.